type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVEQ
  | MODEQ
  | EQ
  | NEQ
  | GTEQ
  | LTEQ
  | GT
  | LT
  | AND
  | OR
  | NOT
  | QUESTION
  | FUNC
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | INFINITE_LOOP
  | RETURN
  | BREAK
  | CONTINUE
  | TRY
  | CATCH
  | RAISE
  | LINK
  | USE
  | IN
  | STEP
  | AS
  | RANGE
  | STRUCT
  | T_NONE
  | T_STR
  | T_INT
  | T_BOOL
  | T_FLOAT
  | T_ARRAY
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COLON
  | COMMA
  | LBRACKET
  | RBRACKET
  | DOT
  | BAR
  | EOF
  | ARROW
  | UNCAP_ID of (string)
  | ID_VAR of (string)
  | CAP_ID of (string)
  | LIT_STR of (string)
  | LIT_INT of (int)
  | LIT_FLOAT of (float)
  | LIT_BOOL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "lib/parser.mly"
open Ast
# 75 "lib/parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
  261 (* MOD *);
  262 (* ASSIGN *);
  263 (* PLUSEQ *);
  264 (* MINUSEQ *);
  265 (* TIMESEQ *);
  266 (* DIVEQ *);
  267 (* MODEQ *);
  268 (* EQ *);
  269 (* NEQ *);
  270 (* GTEQ *);
  271 (* LTEQ *);
  272 (* GT *);
  273 (* LT *);
  274 (* AND *);
  275 (* OR *);
  276 (* NOT *);
  277 (* QUESTION *);
  278 (* FUNC *);
  279 (* IF *);
  280 (* ELSE *);
  281 (* ELIF *);
  282 (* FOR *);
  283 (* WHILE *);
  284 (* INFINITE_LOOP *);
  285 (* RETURN *);
  286 (* BREAK *);
  287 (* CONTINUE *);
  288 (* TRY *);
  289 (* CATCH *);
  290 (* RAISE *);
  291 (* LINK *);
  292 (* USE *);
  293 (* IN *);
  294 (* STEP *);
  295 (* AS *);
  296 (* RANGE *);
  297 (* STRUCT *);
  298 (* T_NONE *);
  299 (* T_STR *);
  300 (* T_INT *);
  301 (* T_BOOL *);
  302 (* T_FLOAT *);
  303 (* T_ARRAY *);
  304 (* SEMI *);
  305 (* LPAREN *);
  306 (* RPAREN *);
  307 (* LBRACE *);
  308 (* RBRACE *);
  309 (* COLON *);
  310 (* COMMA *);
  311 (* LBRACKET *);
  312 (* RBRACKET *);
  313 (* DOT *);
  314 (* BAR *);
    0 (* EOF *);
  315 (* ARROW *);
    0|]

let yytransl_block = [|
  316 (* UNCAP_ID *);
  317 (* ID_VAR *);
  318 (* CAP_ID *);
  319 (* LIT_STR *);
  320 (* LIT_INT *);
  321 (* LIT_FLOAT *);
  322 (* LIT_BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\003\000\002\000\002\000\006\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\004\000\005\000\
\010\000\010\000\008\000\008\000\011\000\011\000\009\000\009\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\021\000\021\000\020\000\020\000\019\000\019\000\017\000\017\000\
\016\000\016\000\016\000\022\000\022\000\022\000\022\000\023\000\
\023\000\023\000\015\000\018\000\014\000\014\000\014\000\024\000\
\024\000\024\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\026\000\026\000\027\000\027\000\028\000\028\000\025\000\025\000\
\025\000\000\000"

let yylen = "\002\000\
\000\000\003\000\000\000\002\000\000\000\002\000\003\000\001\000\
\001\000\001\000\001\000\001\000\004\000\001\000\010\000\005\000\
\002\000\003\000\000\000\001\000\001\000\003\000\000\000\002\000\
\002\000\001\000\001\000\001\000\002\000\001\000\003\000\003\000\
\004\000\006\000\001\000\003\000\000\000\002\000\001\000\002\000\
\005\000\002\000\009\000\001\000\001\000\001\000\001\000\000\000\
\002\000\003\000\003\000\004\000\006\000\005\000\006\000\005\000\
\006\000\002\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\005\000\
\001\000\002\000\000\000\001\000\001\000\003\000\001\000\003\000\
\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\098\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\002\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\
\020\000\008\000\009\000\010\000\011\000\012\000\000\000\014\000\
\007\000\018\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\063\000\062\000\000\000\000\000\000\000\000\000\
\026\000\027\000\028\000\000\000\030\000\000\000\000\000\060\000\
\000\000\078\000\079\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\092\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\090\000\000\000\000\000\
\015\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\086\000\000\000\000\000\064\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\031\000\000\000\000\000\067\000\068\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\032\000\000\000\000\000\096\000\000\000\000\000\000\000\052\000\
\094\000\000\000\087\000\000\000\000\000\097\000\000\000\000\000\
\000\000\041\000\088\000\000\000\033\000\000\000\000\000\000\000\
\000\000\055\000\046\000\047\000\045\000\044\000\000\000\053\000\
\000\000\051\000\058\000\000\000\000\000\034\000\000\000\000\000\
\000\000\000\000\000\000\049\000\043\000\000\000\050\000\057\000"

let yydgoto = "\002\000\
\004\000\005\000\009\000\010\000\006\000\061\000\033\000\024\000\
\062\000\018\000\025\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\096\000\070\000\116\000\183\000\193\000\178\000\
\071\000\072\000\084\000\085\000"

let yysindex = "\023\000\
\241\254\000\000\224\254\000\000\010\255\241\254\238\254\230\254\
\036\000\010\255\000\000\247\254\250\254\000\000\000\000\003\255\
\005\255\023\255\247\254\121\255\247\254\000\000\024\255\029\255\
\000\000\000\000\000\000\000\000\000\000\000\000\034\255\000\000\
\000\000\000\000\247\254\028\255\121\255\000\000\121\255\035\255\
\043\255\000\000\200\255\025\255\025\255\033\255\045\255\058\255\
\200\255\025\255\025\255\200\255\025\255\070\255\073\255\088\255\
\061\255\000\000\000\000\000\000\119\255\074\255\200\255\148\001\
\000\000\000\000\000\000\084\255\000\000\080\255\000\255\000\000\
\031\255\000\000\000\000\025\255\115\255\025\255\000\000\099\002\
\051\001\103\255\008\001\101\255\000\000\121\255\025\255\025\255\
\025\255\025\255\025\255\025\255\097\255\000\000\025\255\122\255\
\000\000\000\000\025\255\025\255\025\255\025\255\025\255\025\255\
\025\255\025\255\025\255\025\255\025\255\025\255\025\255\025\255\
\000\000\000\000\120\255\123\255\025\255\025\255\113\255\070\001\
\110\255\090\001\000\000\128\255\025\255\000\000\129\255\127\255\
\099\002\099\002\099\002\099\002\099\002\132\255\000\000\099\002\
\000\000\017\255\017\255\000\000\000\000\000\000\114\255\114\255\
\099\255\099\255\099\255\099\255\136\002\118\002\027\001\121\255\
\000\000\099\002\229\255\000\000\138\255\150\255\200\255\000\000\
\000\000\025\255\000\000\025\255\220\254\000\000\200\255\004\255\
\221\255\000\000\000\000\169\001\000\000\025\255\140\255\200\255\
\146\255\000\000\000\000\000\000\000\000\000\000\136\255\000\000\
\109\001\000\000\000\000\025\255\167\255\000\000\129\001\009\255\
\200\255\138\255\142\255\000\000\000\000\004\255\000\000\000\000"

let yyrindex = "\000\000\
\001\000\000\000\000\000\000\000\209\000\002\000\000\000\000\000\
\000\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\158\255\000\000\159\255\000\000\164\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\169\255\000\000\000\000\000\000\000\000\000\000\
\000\000\171\255\000\000\169\255\166\255\000\000\000\000\058\000\
\107\000\000\000\000\000\000\000\176\255\000\000\169\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\163\000\000\000\
\079\000\000\000\000\000\000\000\000\000\000\000\000\000\177\255\
\000\000\000\000\219\254\000\000\000\000\000\000\189\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\085\255\000\000\000\000\000\000\000\000\
\191\000\223\001\015\002\025\002\032\002\181\255\000\000\204\255\
\000\000\184\000\208\000\000\000\000\000\000\000\234\001\006\002\
\185\001\195\001\206\001\251\001\238\255\095\000\000\000\000\000\
\000\000\043\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\169\255\133\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\248\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\152\255\000\000\000\000"

let yygindex = "\000\000\
\000\000\247\000\244\000\000\000\000\000\252\255\242\255\000\000\
\209\255\241\000\232\000\207\255\215\255\000\000\106\255\000\000\
\000\000\000\000\000\000\176\000\000\000\000\000\000\000\072\000\
\000\000\215\000\186\000\153\000"

let yytablesize = 921
let yytable = "\079\000\
\005\000\005\000\074\000\075\000\082\000\117\000\168\000\017\000\
\080\000\081\000\195\000\083\000\093\000\173\000\023\000\098\000\
\017\000\174\000\093\000\101\000\102\000\103\000\040\000\001\000\
\041\000\003\000\044\000\176\000\177\000\007\000\023\000\008\000\
\012\000\013\000\120\000\014\000\122\000\088\000\089\000\090\000\
\091\000\092\000\019\000\198\000\045\000\083\000\129\000\130\000\
\131\000\132\000\133\000\016\000\021\000\136\000\118\000\020\000\
\119\000\138\000\139\000\140\000\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\148\000\149\000\150\000\151\000\127\000\
\196\000\051\000\022\000\154\000\155\000\035\000\036\000\053\000\
\039\000\076\000\054\000\083\000\055\000\073\000\051\000\057\000\
\058\000\059\000\060\000\037\000\042\000\043\000\088\000\089\000\
\090\000\091\000\092\000\099\000\100\000\101\000\102\000\103\000\
\051\000\077\000\078\000\051\000\086\000\170\000\051\000\051\000\
\051\000\051\000\099\000\100\000\101\000\102\000\103\000\175\000\
\171\000\087\000\172\000\057\000\095\000\097\000\187\000\106\000\
\107\000\108\000\109\000\114\000\185\000\051\000\054\000\051\000\
\051\000\165\000\115\000\051\000\020\000\093\000\051\000\197\000\
\051\000\051\000\191\000\051\000\051\000\051\000\051\000\121\000\
\054\000\056\000\124\000\054\000\126\000\134\000\054\000\054\000\
\054\000\054\000\026\000\027\000\028\000\029\000\030\000\031\000\
\152\000\137\000\153\000\056\000\156\000\158\000\056\000\160\000\
\163\000\056\000\056\000\056\000\056\000\054\000\032\000\054\000\
\054\000\093\000\162\000\054\000\167\000\169\000\054\000\186\000\
\054\000\054\000\188\000\054\000\054\000\054\000\054\000\189\000\
\056\000\044\000\056\000\056\000\192\000\199\000\056\000\019\000\
\003\000\056\000\017\000\056\000\056\000\021\000\056\000\056\000\
\056\000\056\000\039\000\045\000\023\000\091\000\046\000\037\000\
\040\000\047\000\048\000\049\000\050\000\099\000\100\000\101\000\
\102\000\103\000\179\000\180\000\181\000\182\000\091\000\035\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\051\000\048\000\052\000\038\000\011\000\015\000\053\000\076\000\
\076\000\054\000\076\000\055\000\056\000\034\000\057\000\058\000\
\059\000\060\000\038\000\048\000\135\000\200\000\048\000\094\000\
\128\000\048\000\048\000\048\000\048\000\161\000\005\000\005\000\
\000\000\000\000\000\000\000\000\166\000\076\000\000\000\076\000\
\000\000\000\000\076\000\076\000\000\000\076\000\000\000\000\000\
\048\000\000\000\048\000\000\000\000\000\000\000\048\000\000\000\
\000\000\048\000\000\000\048\000\048\000\000\000\048\000\048\000\
\048\000\048\000\095\000\095\000\095\000\095\000\095\000\095\000\
\000\000\000\000\000\000\000\000\000\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\000\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\000\000\000\000\000\000\
\000\000\000\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\000\000\095\000\000\000\000\000\000\000\000\000\
\000\000\095\000\000\000\089\000\089\000\089\000\089\000\089\000\
\095\000\077\000\095\000\077\000\035\000\000\000\089\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\095\000\089\000\
\095\000\000\000\000\000\095\000\095\000\095\000\095\000\095\000\
\000\000\000\000\000\000\000\000\000\000\000\000\077\000\000\000\
\077\000\000\000\000\000\077\000\077\000\000\000\077\000\000\000\
\000\000\000\000\089\000\000\000\089\000\000\000\000\000\089\000\
\089\000\000\000\089\000\059\000\059\000\059\000\059\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\000\000\059\000\
\065\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\000\000\065\000\000\000\000\000\000\000\
\066\000\066\000\059\000\081\000\059\000\000\000\000\000\059\000\
\059\000\000\000\059\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\000\000\066\000\000\000\000\000\065\000\
\000\000\065\000\000\000\000\000\065\000\065\000\081\000\065\000\
\081\000\000\000\000\000\081\000\081\000\000\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\000\000\066\000\000\000\000\000\066\000\066\000\000\000\066\000\
\099\000\100\000\101\000\102\000\103\000\000\000\000\000\000\000\
\000\000\000\000\000\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\099\000\100\000\101\000\102\000\103\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\000\000\000\000\
\000\000\000\000\000\000\099\000\100\000\101\000\102\000\103\000\
\000\000\000\000\000\000\000\000\000\000\125\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\099\000\100\000\
\101\000\102\000\103\000\000\000\000\000\000\000\000\000\164\000\
\000\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\000\000\099\000\100\000\101\000\102\000\103\000\000\000\
\000\000\000\000\000\000\000\000\123\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\099\000\100\000\101\000\
\102\000\103\000\000\000\000\000\000\000\000\000\000\000\157\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\000\000\099\000\100\000\101\000\102\000\103\000\000\000\000\000\
\000\000\000\000\000\000\159\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\099\000\100\000\101\000\102\000\
\103\000\000\000\000\000\000\000\000\000\000\000\190\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\000\000\
\112\000\099\000\100\000\101\000\102\000\103\000\000\000\000\000\
\000\000\000\000\194\000\000\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\113\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\000\000\075\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\000\000\074\000\
\184\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\000\000\073\000\000\000\000\000\000\000\000\000\000\000\
\075\000\000\000\075\000\000\000\000\000\075\000\075\000\000\000\
\075\000\000\000\074\000\082\000\074\000\070\000\070\000\074\000\
\074\000\000\000\074\000\070\000\070\000\073\000\070\000\073\000\
\000\000\000\000\073\000\073\000\000\000\073\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\082\000\072\000\
\082\000\071\000\071\000\082\000\082\000\000\000\082\000\071\000\
\071\000\070\000\071\000\070\000\000\000\000\000\070\000\070\000\
\000\000\070\000\000\000\083\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\000\000\072\000\084\000\000\000\072\000\
\072\000\000\000\072\000\000\000\085\000\071\000\000\000\071\000\
\000\000\000\000\071\000\071\000\000\000\071\000\083\000\080\000\
\083\000\000\000\000\000\083\000\083\000\000\000\083\000\000\000\
\084\000\000\000\084\000\000\000\000\000\084\000\084\000\085\000\
\084\000\085\000\000\000\000\000\085\000\085\000\000\000\085\000\
\000\000\000\000\080\000\000\000\080\000\000\000\000\000\080\000\
\080\000\000\000\080\000\099\000\100\000\101\000\102\000\103\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\099\000\100\000\
\101\000\102\000\103\000\000\000\000\000\000\000\000\000\000\000\
\000\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\099\000\100\000\101\000\102\000\103\000\000\000\000\000\000\000\
\000\000\000\000\000\000\104\000\105\000\106\000\107\000\108\000\
\109\000"

let yycheck = "\049\000\
\000\000\000\000\044\000\045\000\052\000\006\001\157\000\012\000\
\050\000\051\000\002\001\053\000\050\001\050\001\019\000\063\000\
\021\000\054\001\056\001\003\001\004\001\005\001\037\000\001\000\
\039\000\041\001\002\001\024\001\025\001\062\001\035\000\022\001\
\051\001\060\001\076\000\000\000\078\000\007\001\008\001\009\001\
\010\001\011\001\049\001\194\000\020\001\087\000\088\000\089\000\
\090\000\091\000\092\000\061\001\048\001\095\000\055\001\053\001\
\057\001\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\086\000\
\064\001\049\001\052\001\117\000\118\000\054\001\050\001\055\001\
\053\001\049\001\058\001\125\000\060\001\061\001\002\001\063\001\
\064\001\065\001\066\001\058\001\058\001\051\001\007\001\008\001\
\009\001\010\001\011\001\001\001\002\001\003\001\004\001\005\001\
\020\001\061\001\049\001\023\001\039\001\159\000\026\001\027\001\
\028\001\029\001\001\001\002\001\003\001\004\001\005\001\167\000\
\162\000\049\001\164\000\063\001\006\001\052\001\176\000\014\001\
\015\001\016\001\017\001\048\001\174\000\049\001\002\001\051\001\
\052\001\152\000\059\001\055\001\053\001\054\001\058\001\193\000\
\060\001\061\001\188\000\063\001\064\001\065\001\066\001\037\001\
\020\001\002\001\052\001\023\001\056\001\061\001\026\001\027\001\
\028\001\029\001\042\001\043\001\044\001\045\001\046\001\047\001\
\049\001\048\001\048\001\020\001\060\001\064\001\023\001\048\001\
\050\001\026\001\027\001\028\001\029\001\049\001\062\001\051\001\
\052\001\054\001\058\001\055\001\051\001\040\001\058\001\052\001\
\060\001\061\001\049\001\063\001\064\001\065\001\066\001\064\001\
\049\001\002\001\051\001\052\001\038\001\064\001\055\001\050\001\
\000\000\058\001\052\001\060\001\061\001\050\001\063\001\064\001\
\065\001\066\001\048\001\020\001\052\001\056\001\023\001\048\001\
\048\001\026\001\027\001\028\001\029\001\001\001\002\001\003\001\
\004\001\005\001\014\001\015\001\016\001\017\001\050\001\059\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\049\001\002\001\051\001\048\001\006\000\010\000\055\001\018\001\
\019\001\058\001\021\001\060\001\061\001\021\000\063\001\064\001\
\065\001\066\001\035\000\020\001\093\000\198\000\023\001\057\000\
\087\000\026\001\027\001\028\001\029\001\125\000\022\001\022\001\
\255\255\255\255\255\255\255\255\056\001\048\001\255\255\050\001\
\255\255\255\255\053\001\054\001\255\255\056\001\255\255\255\255\
\049\001\255\255\051\001\255\255\255\255\255\255\055\001\255\255\
\255\255\058\001\255\255\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\001\001\002\001\003\001\004\001\005\001\006\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\048\001\255\255\001\001\002\001\003\001\004\001\005\001\
\055\001\019\001\057\001\021\001\059\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\048\001\021\001\
\050\001\255\255\255\255\053\001\054\001\055\001\056\001\057\001\
\255\255\255\255\255\255\255\255\255\255\255\255\048\001\255\255\
\050\001\255\255\255\255\053\001\054\001\255\255\056\001\255\255\
\255\255\255\255\048\001\255\255\050\001\255\255\255\255\053\001\
\054\001\255\255\056\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\001\001\002\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\255\255\255\255\255\255\
\001\001\002\001\048\001\021\001\050\001\255\255\255\255\053\001\
\054\001\255\255\056\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\255\255\255\255\048\001\
\255\255\050\001\255\255\255\255\053\001\054\001\048\001\056\001\
\050\001\255\255\255\255\053\001\054\001\255\255\056\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\048\001\
\255\255\050\001\255\255\255\255\053\001\054\001\255\255\056\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\054\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\053\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\050\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\050\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\050\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\255\255\050\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\050\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\048\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\048\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\255\255\255\255\255\255\255\255\255\255\
\048\001\255\255\050\001\255\255\255\255\053\001\054\001\255\255\
\056\001\255\255\048\001\021\001\050\001\012\001\013\001\053\001\
\054\001\255\255\056\001\018\001\019\001\048\001\021\001\050\001\
\255\255\255\255\053\001\054\001\255\255\056\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\048\001\021\001\
\050\001\012\001\013\001\053\001\054\001\255\255\056\001\018\001\
\019\001\048\001\021\001\050\001\255\255\255\255\053\001\054\001\
\255\255\056\001\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\048\001\255\255\050\001\021\001\255\255\053\001\
\054\001\255\255\056\001\255\255\021\001\048\001\255\255\050\001\
\255\255\255\255\053\001\054\001\255\255\056\001\048\001\021\001\
\050\001\255\255\255\255\053\001\054\001\255\255\056\001\255\255\
\048\001\255\255\050\001\255\255\255\255\053\001\054\001\048\001\
\056\001\050\001\255\255\255\255\053\001\054\001\255\255\056\001\
\255\255\255\255\048\001\255\255\050\001\255\255\255\255\053\001\
\054\001\255\255\056\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVEQ\000\
  MODEQ\000\
  EQ\000\
  NEQ\000\
  GTEQ\000\
  LTEQ\000\
  GT\000\
  LT\000\
  AND\000\
  OR\000\
  NOT\000\
  QUESTION\000\
  FUNC\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  INFINITE_LOOP\000\
  RETURN\000\
  BREAK\000\
  CONTINUE\000\
  TRY\000\
  CATCH\000\
  RAISE\000\
  LINK\000\
  USE\000\
  IN\000\
  STEP\000\
  AS\000\
  RANGE\000\
  STRUCT\000\
  T_NONE\000\
  T_STR\000\
  T_INT\000\
  T_BOOL\000\
  T_FLOAT\000\
  T_ARRAY\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COLON\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  DOT\000\
  BAR\000\
  EOF\000\
  ARROW\000\
  "

let yynames_block = "\
  UNCAP_ID\000\
  ID_VAR\000\
  CAP_ID\000\
  LIT_STR\000\
  LIT_INT\000\
  LIT_FLOAT\000\
  LIT_BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "lib/parser.mly"
                ( ([], []) )
# 588 "lib/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sdecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fdecls) in
    Obj.repr(
# 61 "lib/parser.mly"
                      ( (_1, _2) )
# 596 "lib/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "lib/parser.mly"
                 ( [] )
# 602 "lib/parser.ml"
               : 'fdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecls) in
    Obj.repr(
# 65 "lib/parser.mly"
                ( _1 :: _2 )
# 610 "lib/parser.ml"
               : 'fdecls))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "lib/parser.mly"
                 ( [] )
# 616 "lib/parser.ml"
               : 'sdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecls) in
    Obj.repr(
# 70 "lib/parser.mly"
                 ( _1 :: _2 )
# 624 "lib/parser.ml"
               : 'sdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 74 "lib/parser.mly"
                     ((_3, _1))
# 632 "lib/parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "lib/parser.mly"
           ( NoneType )
# 638 "lib/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "lib/parser.mly"
          ( StrType )
# 644 "lib/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "lib/parser.mly"
          ( IntType )
# 650 "lib/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "lib/parser.mly"
           ( BoolType )
# 656 "lib/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "lib/parser.mly"
            ( FloatType )
# 662 "lib/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 82 "lib/parser.mly"
                        ( ArrayType(Some(_3), None) )
# 669 "lib/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "lib/parser.mly"
           ( StructType(_1) )
# 676 "lib/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 89 "lib/parser.mly"
  (
    { 
      rtyp = _7;
      fname = _2;
      formals = _4;
      body = _9;
    }
  )
# 693 "lib/parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'members_list) in
    Obj.repr(
# 103 "lib/parser.mly"
  ( 
    { 
      name = _2;
      members = _4; 
    }
  )
# 706 "lib/parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 111 "lib/parser.mly"
             ( [_1] )
# 713 "lib/parser.ml"
               : 'members_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'members_list) in
    Obj.repr(
# 112 "lib/parser.mly"
                            ( _1::_3 )
# 721 "lib/parser.ml"
               : 'members_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "lib/parser.mly"
              ( [] )
# 727 "lib/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formals_list) in
    Obj.repr(
# 117 "lib/parser.mly"
               ( _1 )
# 734 "lib/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 120 "lib/parser.mly"
        ( [_1] )
# 741 "lib/parser.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formals_list) in
    Obj.repr(
# 121 "lib/parser.mly"
                             ( _1::_3 )
# 749 "lib/parser.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "lib/parser.mly"
                ( [] )
# 755 "lib/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 125 "lib/parser.mly"
                    ( _1::_2 )
# 763 "lib/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 128 "lib/parser.mly"
              ( Expr _1 )
# 770 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
    Obj.repr(
# 129 "lib/parser.mly"
            ( _1 )
# 777 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 130 "lib/parser.mly"
          ( _1 )
# 784 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'loop) in
    Obj.repr(
# 131 "lib/parser.mly"
          ( _1 )
# 791 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'return_statement) in
    Obj.repr(
# 132 "lib/parser.mly"
                          ( _1 )
# 798 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_block) in
    Obj.repr(
# 133 "lib/parser.mly"
                          ( _1 )
# 805 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var_init_opt) in
    Obj.repr(
# 134 "lib/parser.mly"
                             ( VarDecl(_1, _2) )
# 813 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list_init_opt) in
    Obj.repr(
# 135 "lib/parser.mly"
                                        ( 
      let var_list        = _1 in 
      let vdecl_ty        = fst _2 in 
      let vdecl_exp       = snd _2 in 
      let create_var_decl = (fun var_name -> ((vdecl_ty, var_name), vdecl_exp)) in
      let list_of_decls = List.fold_left (fun lst var_name -> (create_var_decl var_name) :: lst ) [] var_list 
      in VarDeclList(list_of_decls)
    )
# 828 "lib/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 145 "lib/parser.mly"
                                       ( (_3 , None   )   )
# 835 "lib/parser.ml"
               : 'vdecl_list_init_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 146 "lib/parser.mly"
                                       ( (_3 , Some(_5) ) )
# 843 "lib/parser.ml"
               : 'vdecl_list_init_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 149 "lib/parser.mly"
           ( [_1] )
# 850 "lib/parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl_list) in
    Obj.repr(
# 150 "lib/parser.mly"
                            ( _1 :: _3 )
# 858 "lib/parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "lib/parser.mly"
    ( None )
# 864 "lib/parser.ml"
               : 'var_init_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "lib/parser.mly"
                ( Some(_2) )
# 871 "lib/parser.ml"
               : 'var_init_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "lib/parser.mly"
                                        ( Return NoneLit )
# 877 "lib/parser.ml"
               : 'return_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "lib/parser.mly"
                                        ( Return _2      )
# 884 "lib/parser.ml"
               : 'return_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 164 "lib/parser.mly"
                                            ( While (_3, _5)  )
# 892 "lib/parser.ml"
               : 'loop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 165 "lib/parser.mly"
                              ( While (BoolLit(true), _2)  )
# 899 "lib/parser.ml"
               : 'loop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'end_condition) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'increment) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 168 "lib/parser.mly"
            (
                let var_init   = Assign(Id(_2), IntLit(_4)) in (* ex: i = 0 *)
                let predicate  = Binop(PostfixExpr(Id(_2)), _6, IntLit(_7)) in (* ex: i < 5 *)
                let update     = Assign(Id(_2), Binop(PostfixExpr(Id(_2)), Add, _8) ) in (* ex1: i=i+1, ex2: i=i+(-1) *)
                let block_code = _9 in
                For(var_init, predicate, update, block_code)
            )
# 917 "lib/parser.ml"
               : 'loop))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "lib/parser.mly"
         ( Less   )
# 923 "lib/parser.ml"
               : 'end_condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "lib/parser.mly"
         ( Great  )
# 929 "lib/parser.ml"
               : 'end_condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "lib/parser.mly"
         ( Geq    )
# 935 "lib/parser.ml"
               : 'end_condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "lib/parser.mly"
         ( Leq    )
# 941 "lib/parser.ml"
               : 'end_condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "lib/parser.mly"
                                            ( IntLit(1) )
# 947 "lib/parser.ml"
               : 'increment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 185 "lib/parser.mly"
                 ( IntLit(_2))
# 954 "lib/parser.ml"
               : 'increment))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 186 "lib/parser.mly"
                       ( IntLit(_3 * -1) )
# 961 "lib/parser.ml"
               : 'increment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 189 "lib/parser.mly"
                                            ( Block _2 )
# 968 "lib/parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    Obj.repr(
# 192 "lib/parser.mly"
                                             ( ID_Block _2)
# 975 "lib/parser.ml"
               : 'id_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 195 "lib/parser.mly"
                                        ( If(_1, Expr(_3), Expr(_5)) )
# 984 "lib/parser.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 196 "lib/parser.mly"
                                                ( If(_3, _5, Block[]) )
# 992 "lib/parser.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'else_stmt) in
    Obj.repr(
# 197 "lib/parser.mly"
                                                ( If(_3, _5, _6) )
# 1001 "lib/parser.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 200 "lib/parser.mly"
                                               ( If(_3, _5, Block[]) )
# 1009 "lib/parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'else_stmt) in
    Obj.repr(
# 201 "lib/parser.mly"
                                            ( If(_3, _5, _6) )
# 1018 "lib/parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 202 "lib/parser.mly"
              ( _2 )
# 1025 "lib/parser.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expr) in
    Obj.repr(
# 205 "lib/parser.mly"
                 ( PostfixExpr(_1) )
# 1032 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'string_literal) in
    Obj.repr(
# 207 "lib/parser.mly"
                   ( StrLit(_1) )
# 1039 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 208 "lib/parser.mly"
              ( IntLit(_1)   )
# 1046 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 209 "lib/parser.mly"
              ( BoolLit(_1)  )
# 1053 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 210 "lib/parser.mly"
              ( FloatLit(_1) )
# 1060 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs_opt) in
    Obj.repr(
# 211 "lib/parser.mly"
                                ( ArrayLit(_2) )
# 1067 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 214 "lib/parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 1075 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 215 "lib/parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 1083 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 216 "lib/parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 1091 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 217 "lib/parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 1099 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 218 "lib/parser.mly"
                     ( Binop(_1, Mod,   _3)   )
# 1107 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 221 "lib/parser.mly"
                       ( Binop(_1, Eq, _3)      )
# 1115 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 222 "lib/parser.mly"
                       ( Binop(_1, Neq,   _3)   )
# 1123 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 223 "lib/parser.mly"
                       ( Binop(_1, Less,  _3)   )
# 1131 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 224 "lib/parser.mly"
                       ( Binop(_1, Great, _3)   )
# 1139 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 225 "lib/parser.mly"
                       ( Binop(_1, Leq,   _3)   )
# 1147 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 226 "lib/parser.mly"
                       ( Binop(_1, Geq,   _3)   )
# 1155 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 229 "lib/parser.mly"
                            ( Binop(_1, And,   _3)   )
# 1163 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 230 "lib/parser.mly"
                            ( Binop(_1, Or,    _3)   )
# 1171 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 231 "lib/parser.mly"
                         ( Unop(Neg, _2) )
# 1178 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 232 "lib/parser.mly"
             ( Unop(Not, _2) )
# 1185 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 235 "lib/parser.mly"
                             ( Assign(_1, _3) )
# 1193 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 236 "lib/parser.mly"
                       ( Assign(Id(_1), Binop(PostfixExpr(Id(_1)), Add, _3)))
# 1201 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 237 "lib/parser.mly"
                        ( Assign(Id(_1), Binop(PostfixExpr(Id(_1)), Sub, _3)))
# 1209 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 238 "lib/parser.mly"
                        ( Assign(Id(_1), Binop(PostfixExpr(Id(_1)), Mult, _3)))
# 1217 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 239 "lib/parser.mly"
                      ( Assign(Id(_1), Binop(PostfixExpr(Id(_1)), Div, _3)))
# 1225 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 240 "lib/parser.mly"
                      ( Assign(Id(_1), Binop(PostfixExpr(Id(_1)), Mod, _3)))
# 1233 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 243 "lib/parser.mly"
                       ( _2 )
# 1240 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs_opt) in
    Obj.repr(
# 246 "lib/parser.mly"
                                     ( FuncCall(_1, _3) )
# 1248 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 249 "lib/parser.mly"
                        (TypeCast(_3, _5))
# 1256 "lib/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 253 "lib/parser.mly"
             (  _1 )
# 1263 "lib/parser.ml"
               : 'string_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'string_literal) in
    Obj.repr(
# 254 "lib/parser.mly"
                          ( _1 ^ _2 )
# 1271 "lib/parser.ml"
               : 'string_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 260 "lib/parser.mly"
              ( [] )
# 1277 "lib/parser.ml"
               : 'exprs_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 261 "lib/parser.mly"
          ( _1 )
# 1284 "lib/parser.ml"
               : 'exprs_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 264 "lib/parser.mly"
        ( [_1] )
# 1291 "lib/parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 265 "lib/parser.mly"
                     ( _1::_3 )
# 1299 "lib/parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 269 "lib/parser.mly"
           ( Id(_1) )
# 1306 "lib/parser.ml"
               : 'postfix_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 270 "lib/parser.mly"
                              ( MemberAccess(_1, _3) )
# 1314 "lib/parser.ml"
               : 'postfix_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 272 "lib/parser.mly"
                                        ( Subscript(_1, _3) )
# 1322 "lib/parser.ml"
               : 'postfix_expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
