Viz references

1) lines 15-20 lexm.sh CTeX final project Fall 2021
    Used for scanner testing code in vc.ml
2) VSCOde final project Fall 2018
    Used for symbol table and variable declaration reference in parser.myl, semant.ml and irgen.ml
3) Gu's microC, and all other lecture code
4) Edward's microC, for issue with return statement, 
needed help with figuring out why we couldnt return on a void function.
also, for inspiration for printing all of our various data types. I borrowed
the int_format_string construct and extended it to all of our various datatypes.
becasue, if we cant print, then there is no way to fully debug.
    * also needed to borrow the return void check within the function call. All of these
    three issues went hand in hand.
    * also borrowed the final return check for the add_terminal builder. That goes
    hand in hand with what I wrote above. I just want to be able to compile and get
    these small things out of the way so we can end up building lists/arrays/structs
    * also referenced newbie for various built in print functions
5) https://docs.python.org/3/reference/grammar.html 
python grammar. used it as inspiration for some of our conditional logic stuff

6) https://llvm.moe/ocaml-7.0/Llvm.Fcmp.html#TYPEt
   https://llvm.moe/ocaml-7.0/Llvm.Icmp.html#TYPEt

Used that reference to introduce the predicate for binary operations for floating point types

also:
 build_icmp
 build_fcmp

 I was able to reason about how the pattern for these ops should look based on our starter
 microC code, and then I exteneded it to floats, and Bools (which really could just be left
 as ints, since they are of type i1_t)

7) viz and vizSilent shell script shamelessly borrow lot from pocaml: 
   https://github.com/Pocaml/Pocaml/blob/main/pocamlc
   Thank you, pocaml team! 
8) https://github.com/sam-jay/shoo-lang
Semantic Analysis + Code Generation
